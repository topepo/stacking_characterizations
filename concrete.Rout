
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(parallelly)
> library(ongoal)
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──
✔ broom        1.0.0      ✔ recipes      1.0.1 
✔ dials        1.0.0      ✔ rsample      1.1.0 
✔ dplyr        1.0.10     ✔ tibble       3.1.8 
✔ ggplot2      3.3.6      ✔ tidyr        1.2.1 
✔ infer        1.0.2      ✔ tune         1.0.0 
✔ modeldata    1.0.0      ✔ workflows    1.0.0 
✔ parsnip      1.0.1      ✔ workflowsets 1.0.0 
✔ purrr        0.3.4      ✔ yardstick    1.1.0 
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard() masks scales::discard()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ recipes::step()  masks stats::step()
• Dig deeper into tidy modeling with R at https://www.tmwr.org
> library(bonsai)
> library(rules)

Attaching package: ‘rules’

The following object is masked from ‘package:dials’:

    max_rules

> library(doMC)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> 
> # ------------------------------------------------------------------------------
> 
> tidymodels_prefer()
> theme_set(theme_bw())
> options(pillar.advice = FALSE)
> registerDoMC(cores = parallelly::availableCores())
> 
> # ------------------------------------------------------------------------------
> 
> data(concrete) 
> 
> concrete <- 
+   concrete %>% 
+   group_by(cement, blast_furnace_slag, fly_ash, water, superplasticizer, 
+            coarse_aggregate, fine_aggregate, age) 
> 
> averaged <- 
+   concrete %>% 
+   summarize(compressive_strength = mean(compressive_strength), .groups = "drop")
> 
> set.seed(1701)
> conc_split <- initial_split(averaged, strata = compressive_strength)
> conc_train <- training(conc_split)
> conc_test  <- testing(conc_split)
> 
> set.seed(1702) 
> conc_rs <- vfold_cv(conc_train, strata = compressive_strength)
> 
> # ------------------------------------------------------------------------------
> 
> grid_ctrl <-
+   control_grid(
+     parallel_over = "everything",
+     save_pred = TRUE,
+     save_workflow = TRUE
+   )
> 
> # ------------------------------------------------------------------------------
> 
> predictors <- names(conc_train)[names(conc_train) != "compressive_strength"]
> 
> conc_rec <- 
+   recipe(compressive_strength ~ ., data = conc_train) %>% 
+   step_YeoJohnson(all_numeric_predictors()) %>% 
+   step_normalize(all_numeric_predictors())
> 
> conc_quad_rec <- 
+   conc_rec %>% 
+   step_interact(~ all_predictors():all_predictors()) %>% 
+   step_poly(all_of(predictors), degree = 2)
> 
> # ------------------------------------------------------------------------------
> 
> bag_tree_rpart_spec <-
+   bag_tree() %>%
+   set_engine('rpart') %>%
+   set_mode('regression')
parsnip could not locate an implementation for `bag_tree`  model specifications using the `rpart` engine.
> 
> bart_dparts_spec <-
+   parsnip::bart(
+     prior_terminal_node_coef = tune(),
+     prior_terminal_node_expo = tune(),
+     prior_outcome_range = tune(),
+     trees = 500
+   ) %>%
+   set_mode("regression")
> 
> boost_tree_xgboost_spec <-
+   boost_tree(
+     tree_depth = tune(),
+     trees = tune(),
+     learn_rate = tune(),
+     min_n = tune(),
+     loss_reduction = tune(),
+     sample_size = tune(),
+     stop_iter = tune()
+   ) %>% 
+   set_engine('xgboost') %>%
+   set_mode('regression')
> 
> boost_tree_lgb_spec <-
+   boost_tree(
+     tree_depth = tune(),
+     trees = tune(),
+     learn_rate = tune(),
+     min_n = tune(),
+     loss_reduction = tune(),
+     sample_size = tune()
+   ) %>% 
+   set_engine('lightgbm') %>%
+   set_mode('regression')
> 
> cubist_rules_Cubist_spec <-
+   cubist_rules(committees = tune(), neighbors = tune()) %>%
+   set_engine('Cubist')
> 
> decision_tree_rpart_spec <-
+   decision_tree(min_n = tune(), cost_complexity = tune()) %>%
+   set_engine('rpart') %>%
+   set_mode('regression')
> 
> gam_mgcv_spec <- 
+   gen_additive_mod(select_features = tune(), adjust_deg_free = tune()) %>% 
+   set_mode("regression")
> 
> linear_reg_glmnet_spec <-
+   linear_reg(penalty = tune(), mixture = tune()) %>%
+   set_engine('glmnet')
> 
> mars_earth_spec <-
+   mars(prod_degree = tune()) %>%
+   set_engine('earth') %>%
+   set_mode('regression')
> 
> 
> mlp_spec <-
+   mlp(
+     hidden_units = tune(),
+     penalty = tune(),
+     epochs =tune()
+   ) %>%
+   set_mode('regression')
> 
> mlp_param <- 
+   mlp_spec %>% 
+   extract_parameter_set_dials() %>% 
+   update(hidden_units = hidden_units(c(2, 200)))
> 
> nearest_neighbor_kknn_spec <-
+   nearest_neighbor(neighbors = tune(), weight_func = tune(), dist_power = tune()) %>%
+   set_engine('kknn') %>%
+   set_mode('regression')
> 
> rand_forest_ranger_spec <-
+   rand_forest(mtry = tune(), min_n = tune()) %>%
+   set_engine('ranger') %>%
+   set_mode('regression')
> 
> svm_rbf_kernlab_spec <-
+   svm_rbf(cost = tune(), rbf_sigma = tune()) %>%
+   set_engine('kernlab') %>%
+   set_mode('regression')
> 
> # ------------------------------------------------------------------------------
> 
> gam_wflow <- 
+   workflow() %>% 
+   add_model(
+     gam_mgcv_spec,
+     formula = compressive_strength ~ s(cement) + s(blast_furnace_slag) + 
+       s(fly_ash) + s(water) + s(superplasticizer) + s(coarse_aggregate) + 
+       s(fine_aggregate) + s(age)
+   ) %>% 
+   add_recipe(conc_rec)
> 
> # ------------------------------------------------------------------------------
> 
> main_models <- 
+   list(
+     bag_tree = bag_tree_rpart_spec,
+     bart = bart_dparts_spec,
+     xgboost = boost_tree_xgboost_spec,
+     lightgbm = boost_tree_lgb_spec,
+     cubist_rules = cubist_rules_Cubist_spec,
+     decision_tree = decision_tree_rpart_spec,
+     mars = mars_earth_spec,
+     mlp = mlp_spec,
+     nearest_neighbor = nearest_neighbor_kknn_spec,
+     rand_forest = rand_forest_ranger_spec,
+     svm_rbf = svm_rbf_kernlab_spec
+   )
> 
> quad_models <- list(linear_reg = linear_reg_glmnet_spec)
> 
> # ------------------------------------------------------------------------------
> 
> 
> conc_wflow_set <- 
+   workflow_set(
+     preproc = list(plain = conc_rec),
+     models = main_models
+   ) %>% 
+   bind_rows(
+     workflow_set(
+       preproc = list(quadratic = conc_quad_rec),
+       models = quad_models
+     )
+   ) %>% 
+   option_add(id = "plain_mlp", param_info = mlp_param)
> 
> 
> set.seed(1703)
> gam_res <-
+   gam_wflow %>%
+   tune_grid(
+     resamples = conc_rs,
+     grid = 25,
+     control = control_grid(parallel_over = "everything", save_workflow = TRUE)
+   )
x Fold02: preprocessor 1/1, model 24/25: Error in magic(G$y, G$X, msp, G$S, G$off, L = G$L, lsp0 = G$lsp0, G$rank...
> 
> conc_res <-
+   conc_wflow_set %>%
+   workflow_map(
+     verbose = FALSE,
+     seed = 1704,
+     grid = 25,
+     resamples = conc_rs,
+     control = control_grid(parallel_over = "everything")
+   ) %>% 
+   bind_rows(as_workflow_set(plain_gam = gam_res))
x Fold05: preprocessor 1/1, model 1/1:
  Error in `fit_xy()`:
  ! data.frame_ is unknown.
x Fold04: preprocessor 1/1, model 1/1:
  Error in `fit_xy()`:
  ! data.frame_ is unknown.
x Fold02: preprocessor 1/1, model 1/1:
  Error in `fit_xy()`:
  ! data.frame_ is unknown.
x Fold07: preprocessor 1/1, model 1/1:
  Error in `fit_xy()`:
  ! data.frame_ is unknown.
x Fold09: preprocessor 1/1, model 1/1:
  Error in `fit_xy()`:
  ! data.frame_ is unknown.
x Fold06: preprocessor 1/1, model 1/1:
  Error in `fit_xy()`:
  ! data.frame_ is unknown.
x Fold10: preprocessor 1/1, model 1/1:
  Error in `fit_xy()`:
  ! data.frame_ is unknown.
x Fold03: preprocessor 1/1, model 1/1:
  Error in `fit_xy()`:
  ! data.frame_ is unknown.
x Fold01: preprocessor 1/1, model 1/1:
  Error in `fit_xy()`:
  ! data.frame_ is unknown.
x Fold08: preprocessor 1/1, model 1/1:
  Error in `fit_xy()`:
  ! data.frame_ is unknown.
