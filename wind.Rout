
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(parallelly)
> library(tidytuesdayR)
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──
✔ broom        1.0.0          ✔ recipes      1.0.1.9000
✔ dials        1.0.0          ✔ rsample      1.1.0     
✔ dplyr        1.0.10         ✔ tibble       3.1.8     
✔ ggplot2      3.3.6          ✔ tidyr        1.2.1     
✔ infer        1.0.2          ✔ tune         1.0.0.9000
✔ modeldata    1.0.0          ✔ workflows    1.1.0     
✔ parsnip      1.0.2          ✔ workflowsets 1.0.0     
✔ purrr        0.3.4          ✔ yardstick    1.1.0     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard() masks scales::discard()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ recipes::step()  masks stats::step()
• Search for functions across packages at https://www.tidymodels.org/find/
> library(embed)
> library(bonsai)
> library(baguette)
> library(rules)

Attaching package: ‘rules’

The following object is masked from ‘package:dials’:

    max_rules

> library(doMC)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> 
> # ------------------------------------------------------------------------------
> 
> tidymodels_prefer()
> theme_set(theme_bw())
> options(pillar.advice = FALSE)
> registerDoMC(cores = parallelly::availableCores())
> 
> # ------------------------------------------------------------------------------
> 
> wind_turbine_raw <- tt_load("2020-10-27")$`wind-turbine`
--- Compiling #TidyTuesday Information for 2020-10-27 ----
--- There is 1 file available ---
--- Starting Download ---

	Downloading file 1 of 1: `wind-turbine.csv`

--- Download complete ---
> 
> wind_turbine <-
+   wind_turbine_raw %>%
+   rename(capacity = total_project_capacity_mw) %>%
+   mutate(
+     commissioning_date = as.numeric(commissioning_date),
+     turbine_number_in_project = gsub("[[:digit:]]/", "", turbine_number_in_project),
+     turbine_number_in_project = as.numeric(turbine_number_in_project),
+     across(where(is.character), as.factor)
+   ) %>%
+   select(-objectid, -notes, -turbine_identifier, -project_name)
Warning message:
Problem while computing `commissioning_date = as.numeric(commissioning_date)`.
ℹ NAs introduced by coercion 
> 
> set.seed(1701)
> wind_split <- initial_split(wind_turbine, strata = capacity)
> wind_train <- training(wind_split)
> wind_test  <- testing(wind_split)
> 
> set.seed(1702) 
> wind_rs <- vfold_cv(wind_train, strata = capacity)
> 
> # ------------------------------------------------------------------------------
> 
> grid_ctrl <-
+   control_grid(
+     parallel_over = "everything",
+     save_pred = TRUE,
+     save_workflow = TRUE
+   )
> 
> # ------------------------------------------------------------------------------
> 
> base_rec <- 
+   recipe(capacity ~ ., data = wind_train) %>% 
+   step_lencode_mixed(model, manufacturer, outcome = vars(capacity)) 
> 
> dummy_rec <- 
+   base_rec %>% 
+   step_dummy(all_nominal_predictors()) %>% 
+   step_zv(all_predictors()) %>% 
+   step_normalize(all_numeric_predictors())
> 
> # ------------------------------------------------------------------------------
> 
> bag_tree_rpart_spec <-
+   bag_tree() %>%
+   set_engine('rpart') %>%
+   set_mode('regression')
> 
> bart_dparts_spec <-
+   parsnip::bart(
+     prior_terminal_node_coef = tune(),
+     prior_terminal_node_expo = tune(),
+     prior_outcome_range = tune(),
+     trees = 500
+   ) %>%
+   set_mode("regression")
> 
> boost_tree_xgboost_spec <-
+   boost_tree(
+     tree_depth = tune(),
+     trees = tune(),
+     learn_rate = tune(),
+     min_n = tune(),
+     loss_reduction = tune(),
+     sample_size = tune(),
+     stop_iter = tune()
+   ) %>% 
+   set_engine('xgboost') %>%
+   set_mode('regression')
> 
> boost_tree_lgb_spec <-
+   boost_tree(
+     tree_depth = tune(),
+     trees = tune(),
+     learn_rate = tune(),
+     min_n = tune(),
+     loss_reduction = tune(),
+     sample_size = tune()
+   ) %>% 
+   set_engine('lightgbm') %>%
+   set_mode('regression')
> 
> cubist_rules_Cubist_spec <-
+   cubist_rules(committees = tune(), neighbors = tune()) %>%
+   set_engine('Cubist')
> 
> decision_tree_rpart_spec <-
+   decision_tree(min_n = tune(), cost_complexity = tune()) %>%
+   set_engine('rpart') %>%
+   set_mode('regression')
> 
> gam_mgcv_spec <- 
+   gen_additive_mod(select_features = tune(), adjust_deg_free = tune()) %>% 
+   set_mode("regression")
> 
> linear_reg_glmnet_spec <-
+   linear_reg(penalty = tune(), mixture = tune()) %>%
+   set_engine('glmnet')
> 
> mars_earth_spec <-
+   mars(prod_degree = tune()) %>%
+   set_engine('earth') %>%
+   set_mode('regression')
> 
> mlp_spec <-
+   mlp(
+     hidden_units = tune(),
+     penalty = tune(),
+     epochs = tune()
+   ) %>%
+   set_engine("nnet", MaxNWts = 2000) %>% 
+   set_mode('regression')
> 
> mlp_param <- 
+   mlp_spec %>% 
+   extract_parameter_set_dials() %>% 
+   update(hidden_units = hidden_units(c(2, 200)))
> 
> nearest_neighbor_kknn_spec <-
+   nearest_neighbor(neighbors = tune(), weight_func = tune(), dist_power = tune()) %>%
+   set_engine('kknn') %>%
+   set_mode('regression')
> 
> rand_forest_ranger_spec <-
+   rand_forest(mtry = tune(), min_n = tune()) %>%
+   set_engine('ranger') %>%
+   set_mode('regression')
> 
> svm_rbf_kernlab_spec <-
+   svm_rbf(cost = tune(), rbf_sigma = tune()) %>%
+   set_engine('kernlab') %>%
+   set_mode('regression')
> 
> # ------------------------------------------------------------------------------
> 
> models_1 <- 
+   list(
+     bag_tree = bag_tree_rpart_spec,
+     bart = bart_dparts_spec,
+     xgboost = boost_tree_xgboost_spec,
+     lightgbm = boost_tree_lgb_spec,
+     cubist_rules = cubist_rules_Cubist_spec,
+     decision_tree = decision_tree_rpart_spec,
+     mars = mars_earth_spec,
+     rand_forest = rand_forest_ranger_spec
+   )
> 
> models_2 <- 
+   list(
+     mlp = mlp_spec,
+     nearest_neighbor = nearest_neighbor_kknn_spec,
+     svm_rbf = svm_rbf_kernlab_spec
+   )
> 
> 
> # ------------------------------------------------------------------------------
> 
> 
> wind_wflow_set <- 
+   workflow_set(
+     preproc = list(plain = base_rec),
+     models = models_1
+   ) %>% 
+   bind_rows(
+     workflow_set(
+       preproc = list(indicators = dummy_rec),
+       models = models_2
+     )
+   ) %>% 
+   option_add(id = "indicators_mlp", param_info = mlp_param)
> 
> wind_res <-
+   wind_wflow_set %>%
+   workflow_map(
+     verbose = FALSE,
+     seed = 1704,
+     grid = 25,
+     resamples = wind_rs,
+     control = grid_ctrl
+   ) 
x Fold01: preprocessor 1/1, model 14/25 (predictions):
  Error in `mutate()`:
  ! Problem while computing `.row = orig_rows`.
  ✖ `.row` must be size 424 or 1, not 504.
